<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ubuntu</title>
    <link href="/2022/12/03/ubuntu/"/>
    <url>/2022/12/03/ubuntu/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu系统</p><hr><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><h5 id="1-安装过程中遇到的问题"><a href="#1-安装过程中遇到的问题" class="headerlink" title="1. 安装过程中遇到的问题"></a>1. 安装过程中遇到的问题</h5><p>用rufuns制作U盘启动盘的时候，rufuns下载3.7的版本，高版本在制作ubuntu 16.4启动过程中会报错，rufuns 3.21用于制作ubuntu 22.4启动盘</p><p>Rufuns 3.7-&gt;ubuntu 16.4<br>Rufuns 3.21-&gt;ubuntu 22.4</p><h5 id="2-ubuntu20-04如何连接wifi"><a href="#2-ubuntu20-04如何连接wifi" class="headerlink" title="2. ubuntu20.04如何连接wifi"></a>2. ubuntu20.04如何连接wifi</h5><h6 id="2-1-给电脑插上网线"><a href="#2-1-给电脑插上网线" class="headerlink" title="2.1 给电脑插上网线"></a>2.1 给电脑插上网线</h6><h6 id="2-2-打开终端"><a href="#2-2-打开终端" class="headerlink" title="2.2 打开终端"></a>2.2 打开终端</h6><h6 id="2-3-更新ubuntu20-04系统源软件包"><a href="#2-3-更新ubuntu20-04系统源软件包" class="headerlink" title="2.3 更新ubuntu20.04系统源软件包"></a>2.3 更新ubuntu20.04系统源软件包</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure><h6 id="2-4-安装无线网卡驱动"><a href="#2-4-安装无线网卡驱动" class="headerlink" title="2.4 安装无线网卡驱动"></a>2.4 安装无线网卡驱动</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install bcmwl-kernel-source<br></code></pre></td></tr></table></figure><h6 id="2-5-重启ubuntu20-04系统即可"><a href="#2-5-重启ubuntu20-04系统即可" class="headerlink" title="2.5 重启ubuntu20.04系统即可"></a>2.5 重启ubuntu20.04系统即可</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><h5 id="3-解决-linux-下搜索不到蓝牙设备"><a href="#3-解决-linux-下搜索不到蓝牙设备" class="headerlink" title="3. 解决 linux 下搜索不到蓝牙设备"></a>3. 解决 linux 下搜索不到蓝牙设备</h5><h6 id="3-1-按照里面方法来-看下kernel里蓝牙的错误log-加载-hcd文件失败-因为文件不存在"><a href="#3-1-按照里面方法来-看下kernel里蓝牙的错误log-加载-hcd文件失败-因为文件不存在" class="headerlink" title="3.1 按照里面方法来, 看下kernel里蓝牙的错误log, 加载 hcd文件失败, 因为文件不存在"></a>3.1 按照里面方法来, 看下kernel里蓝牙的错误log, 加载 hcd文件失败, 因为文件不存在</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg | grep -i bluetooth | grep -i firmware<br></code></pre></td></tr></table></figure><h6 id="3-2-下载git仓库"><a href="#3-2-下载git仓库" class="headerlink" title="3.2 下载git仓库"></a>3.2 下载git仓库</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/winterheart/broadcom-bt-firmware.git<br></code></pre></td></tr></table></figure><h6 id="3-3-拷贝hcd文件到指定目录"><a href="#3-3-拷贝hcd文件到指定目录" class="headerlink" title="3.3 拷贝hcd文件到指定目录"></a>3.3 拷贝hcd文件到指定目录</h6><p>brcm文件夹里的hcb文件,这里我的电脑需要的是brcm&#x2F;BCM43142A0-105b-e065.hcd<br>拷贝到 &#x2F;lib&#x2F;firmware&#x2F;brcm目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> BCM43142A0-105b-e065.hcd  /lib/firmware/brcm/<br></code></pre></td></tr></table></figure><h6 id="3-4-重新加载蓝牙模块"><a href="#3-4-重新加载蓝牙模块" class="headerlink" title="3.4 重新加载蓝牙模块"></a>3.4 重新加载蓝牙模块</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo modprobe -r btusb <br>sudo modprobe btusb<br></code></pre></td></tr></table></figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h5 id="1-Ubuntu-LTS的LTS是什么意思"><a href="#1-Ubuntu-LTS的LTS是什么意思" class="headerlink" title="1. Ubuntu LTS的LTS是什么意思?"></a>1. Ubuntu LTS的LTS是什么意思?</h5><p>LTS&#x3D;Long  Term Support意为长期支持版本，LTS一般是偶数年的4月份发布，比如16.04、18.04、20.04…，也是稳定的Ubuntu版本。LTS的生命周期是5年，Ubuntu背后的公司Canonical提供安全更新和补丁。5年结束后，官方还提供3年或者5年的扩展支持维护（ESM），也就是LTS版本多了几年的支持时间，不过这个服务是付费的，Ubuntu的Member可以免费获得。除了LTS之外版本为新特性、试验性质版本，正常时9个月支持。没有ESM</p><h5 id="2-Linux文件系统"><a href="#2-Linux文件系统" class="headerlink" title="2.Linux文件系统"></a>2.Linux文件系统</h5><h6 id="2-1-文件系统是什么"><a href="#2-1-文件系统是什么" class="headerlink" title="2.1 文件系统是什么"></a>2.1 文件系统是什么</h6><p>文件系统是操作系统用于明确存储设备（常见的有磁盘，固态硬盘等）或分区上的文件的方法和数据结构，即在存储设备上组织文件的方法。<br>操作系统中负责管理和存储文件信息的软件机构称为文件管理系统，简称文件系统。</p><h6 id="2-2-文件系统可以做什么"><a href="#2-2-文件系统可以做什么" class="headerlink" title="2.2 文件系统可以做什么"></a>2.2 文件系统可以做什么</h6><p>从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文件存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立文件，存入、读出、修改、转储文件，控制文件的存取，当用户不再使用时撤销文件等。</p><h3 id="操作相关"><a href="#操作相关" class="headerlink" title="操作相关"></a>操作相关</h3><h5 id="1-磁盘空间"><a href="#1-磁盘空间" class="headerlink" title="1. 磁盘空间"></a>1. 磁盘空间</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -hl 查看磁盘剩余空间<br><span class="hljs-built_in">df</span> -h 查看每个根路径的分区大小<br><span class="hljs-built_in">du</span> -sh [目录名] 返回该目录的大小<br><span class="hljs-built_in">du</span> -sm [文件夹] 返回该文件夹总M数<br><span class="hljs-built_in">df</span> -T：查看所有磁盘的文件系统类型(<span class="hljs-built_in">type</span>)<br>fdisk -l：查看所有被系统识别的磁盘<br>mount -t <span class="hljs-built_in">type</span> device <span class="hljs-built_in">dir</span>：挂载device到<span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure><h5 id="2-ubuntu软件位置-安装位置-运行文件位置-缓存位置"><a href="#2-ubuntu软件位置-安装位置-运行文件位置-缓存位置" class="headerlink" title="2. ubuntu软件位置(安装位置, 运行文件位置, 缓存位置)"></a>2. ubuntu软件位置(安装位置, 运行文件位置, 缓存位置)</h5><h6 id="2-1-查看软件安装的所有路径"><a href="#2-1-查看软件安装的所有路径" class="headerlink" title="2.1 查看软件安装的所有路径"></a>2.1 查看软件安装的所有路径</h6><p>要知道文件都安装在哪些地方、放在哪些文件夹里，可以通过 whereis 软件名的命令查看所有的文件路径比如你想查找 firefox 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">whereis firefox<br>find / -name firefox // 直接找的整个硬盘<br>locate filename // 什么都会找出来<br></code></pre></td></tr></table></figure><h6 id="2-2-查询运行文件所在路径"><a href="#2-2-查询运行文件所在路径" class="headerlink" title="2.2 查询运行文件所在路径"></a>2.2 查询运行文件所在路径</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> firefox<br></code></pre></td></tr></table></figure><h6 id="2-3-下载的软件缓存位置"><a href="#2-3-下载的软件缓存位置" class="headerlink" title="2.3 下载的软件缓存位置"></a>2.3 下载的软件缓存位置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/cache/apt/archives<br></code></pre></td></tr></table></figure><h6 id="2-4-安装后软件的默认位置"><a href="#2-4-安装后软件的默认位置" class="headerlink" title="2.4 安装后软件的默认位置"></a>2.4 安装后软件的默认位置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/share<br></code></pre></td></tr></table></figure><h6 id="2-5-可执行文件位置"><a href="#2-5-可执行文件位置" class="headerlink" title="2.5 可执行文件位置"></a>2.5 可执行文件位置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin<br></code></pre></td></tr></table></figure><h6 id="2-6-配置文件位置"><a href="#2-6-配置文件位置" class="headerlink" title="2.6 配置文件位置"></a>2.6 配置文件位置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc<br></code></pre></td></tr></table></figure><h6 id="2-7-lib文件位置"><a href="#2-7-lib文件位置" class="headerlink" title="2.7 lib文件位置"></a>2.7 lib文件位置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/lib<br></code></pre></td></tr></table></figure><h5 id="3-ubuntu下安装软件可以指定安装路径吗？"><a href="#3-ubuntu下安装软件可以指定安装路径吗？" class="headerlink" title="3. ubuntu下安装软件可以指定安装路径吗？"></a>3. ubuntu下安装软件可以指定安装路径吗？</h5><p>ubuntu和windows不同，在ubuntu里，一个程序的不同文件是被放在不同的地方的。比如说，主程序文件一般是放在&#x2F;usr&#x2F;bin&#x2F;里，配置文件放在&#x2F;etc&#x2F;里，帮助文档放在&#x2F;usr&#x2F;share&#x2F;man里，设置好相应的环境变量后这样安装的软件是很方便使用的。例如，你装好一个软件后，可以立即在命令行打入程序的名字就可以运行，打入man 后可以查找帮助。但如果你不是按正常的路径安装，你想要运行一个命令，你就还要设置相应的环境变量等等比较麻烦。最后回答你，安装路径是可以改的（其实无所谓安装路径，你把一个可以运行的程序拷到哪它就相当于安在哪，可以看到make install时linux就是在执行拷贝命令）</p><h5 id="4-ubuntu下软件安装的方法"><a href="#4-ubuntu下软件安装的方法" class="headerlink" title="4. ubuntu下软件安装的方法"></a>4. ubuntu下软件安装的方法</h5><h6 id="4-1-直接在ubuntu软件商店安装"><a href="#4-1-直接在ubuntu软件商店安装" class="headerlink" title="4.1 直接在ubuntu软件商店安装"></a>4.1 直接在ubuntu软件商店安装</h6><p>在ubuntu软件商店里面安装软件是最方便的，直接搜索软件名，然后点击安装输入密码就行了</p><h6 id="4-2-使用apt命令安装"><a href="#4-2-使用apt命令安装" class="headerlink" title="4.2 使用apt命令安装"></a>4.2 使用apt命令安装</h6><p>不只Ubuntu，其实Debian系统的系统（Debian，Ubuntu，Deepin，Raspbian等）都可以使用apt命令安装软件<br>在Ubuntu 16 之前要使用 apt-get install 软件包来安装，在Ubuntu 16 之后可以直接使用 apt install 软件包来安装，apt命令用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update -y                    // 更新软件列表<br>apt search 关键字                // 搜索软件<br>apt show 软件包名                // 显示软件包详情<br>apt install 软件包名             // 安装软件<br>apt upgrade 软件包名             // 升级指定软件<br>apt upgrade                     // 升级所有可以升级的软件<br>apt remove 软件包名              // 卸载软件：<br>apt autoremove 软件包名          // 卸载软件并移除软件依赖<br>apt remove 软件包名 --purge      // 卸载软件并删除配置文件<br></code></pre></td></tr></table></figure><p>在终端占直接运行命令就可以安装，比如使用下面的命令安装 gimp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install gimp -y<br></code></pre></td></tr></table></figure><h6 id="4-3-使用snap命令安装"><a href="#4-3-使用snap命令安装" class="headerlink" title="4.3 使用snap命令安装"></a>4.3 使用snap命令安装</h6><p>snap是在Ubuntu 16 新添加的一种软件包格式。这种格式把软件运行所需的依赖全部打包到软件包里面， 运行的时候持载到一个虚拟的环境里面运行。所有这种格式的软件包安装时不会破坏系统现有的软件包依赖，snap 命令用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">snap find 关键字                // 搜索软件包<br>snap info 软件包名              // 显示软件包详情<br>snap install 软件包名           // 安装软件包<br>snap refresh 软件包名           // 升级指定软件<br>snap refresh                    // 升级所有可以升级的软件<br>snap remove 软件包名            // 卸载软件<br></code></pre></td></tr></table></figure><p>也是直接在终端运行命令就可以安装，比如使用下面的命令安装wps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo snap install wps-2019-snap<br></code></pre></td></tr></table></figure><h6 id="4-4-使用dpkg命令安装deb包"><a href="#4-4-使用dpkg命令安装deb包" class="headerlink" title="4.4 使用dpkg命令安装deb包"></a>4.4 使用dpkg命令安装deb包</h6><p>上面3种方法都只能安装已经添加的软件源里面的软件。但像网易云音乐、百度网盘这些并没有在软件源里面，而是在官网提供deb后缀的软件包下载，这种软件我们就要用到dpkg命令来安装了，dpkg 命令用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -i package.deb              // 安装包<br>dpkg -r package                 // 删除包<br>dpkg -P package                 // 删除包（包括配置文件）<br>dpkg -L package                 // 列出与该包关联的文件<br>dpkg -l package                 // 显示该包的版本<br>dpkg –unpack package.deb         // 解开 deb 包的内容<br>dpkg -S keyword                  // 搜索所属的包内容<br>dpkg -l                          // 列出当前已安装的包<br>dpkg -c package.deb              // 列出 deb 包的内容<br>dpkg –configure package         // 配置包<br></code></pre></td></tr></table></figure><p>也是直接在终端运行命令就可以安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i 文件名.deb<br></code></pre></td></tr></table></figure><h6 id="4-5-使用源码编译安装"><a href="#4-5-使用源码编译安装" class="headerlink" title="4.5 使用源码编译安装"></a>4.5 使用源码编译安装</h6><p>使用上面4种方法安装软件要在软件源里面有该软件才行，如果源里面没有的软件要怎样安装呢？ 除了使用编译好不用安装的绿色软件之外，就只有使用源码编译安装了。</p><p>编译安装不同的软件的具体方法是不一样的，一般源码的根目录下会有一个INSTALL文件或README文件会讲到要安装的依赖项和编译方法。不过一般大致也就下面几步：</p><ul><li>配置<br>有些软件源码根目录下会有一个用于配置的脚本文件(configure)，执行.&#x2F;configure命令脚本会根据当前的系统环境配置一些东西。<br>一般这个脚本也可以传一些参数来定制要编译的内容，在INSTALL文件或README文件里面会讲都有哪些参数。</li><li>编译<br>大部分开源软件都是使用make命令来编译软件，直接在源码目录下运行make就行。 对于有多种不同make参数的项目，说明文件里面也会讲到。</li><li>安装<br>除了一些只编译成一个二进制文件可以到处用的软件外，大部分软件编译以后都是要安装的。<br>一般的安装命令是sudo make install。不过也不排除有其他安装方法，可以看源码说明文件。</li></ul><h5 id="5-sda-sdb-sdc-sda1-sda2在Linux中都代表什么"><a href="#5-sda-sdb-sdc-sda1-sda2在Linux中都代表什么" class="headerlink" title="5. sda, sdb, sdc, sda1, sda2在Linux中都代表什么?"></a>5. sda, sdb, sdc, sda1, sda2在Linux中都代表什么?</h5><p>意义如下：</p><ul><li>第一个软驱 &#x2F;dev&#x2F;fd0</li><li>第二个软驱 &#x2F;dev&#x2F;fd1</li><li>第一块硬盘 &#x2F;dev&#x2F;sda</li><li>第二块硬盘 &#x2F;dev&#x2F;sdb<br>以此类推…<br>第一个SCSI CD-ROM &#x2F;dev&#x2F;scd0, 可以用&#x2F;dev&#x2F;sr0<br>sda1, sda2是sda这块硬盘上的两个分区</li></ul><h5 id="6-如何查看-x2F-dev-x2F-sda-下的文件"><a href="#6-如何查看-x2F-dev-x2F-sda-下的文件" class="headerlink" title="6. 如何查看 &#x2F;dev&#x2F;sda 下的文件?"></a>6. 如何查看 &#x2F;dev&#x2F;sda 下的文件?</h5><p>&#x2F;dev&#x2F;sda是指接在SATA、SCSI第一个接口上的硬盘。&#x2F;dev&#x2F;sda是指整个硬盘，实际使用中一般都会有分区，也就是&#x2F;dev&#x2F;sda1, &#x2F;dev&#x2F;sda2这样的。肯定有一些分区已经挂载了，先用df命令，可以看到各个分区分区被挂载到哪个目录，然后ls查看你想要查的目录。</p><p>另外，那些没有被挂载的分区，如果你知道是哪些，那直接用mount命令挂载到某个目录下，然后用ls自己看就好了，如果不知道还有哪些分区，就用fdisk命令查一下：</p><ul><li>方法一：sudo fdisk -l</li><li>方法二：sudo fdisk  &#x2F;dev&#x2F;sda进入交互模式，然后输入p</li><li>方法三：查看单个硬盘，通过 fdisk -l  &#x2F;dev&#x2F;sad1</li></ul><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="1-软件安装报错Waiting-for-cache-lock-Could-not-get-lock-x2F-var-x2F-lib-x2F-dpkg-x2F-lock-frontend"><a href="#1-软件安装报错Waiting-for-cache-lock-Could-not-get-lock-x2F-var-x2F-lib-x2F-dpkg-x2F-lock-frontend" class="headerlink" title="1. 软件安装报错Waiting for cache lock:Could not get lock &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend"></a>1. 软件安装报错Waiting for cache lock:Could not get lock &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend</h4><p>出现这种报错一般是上一次的安装任务正在进行&#x2F;意外中断导致本次的install无法执行&#x2F;正常完成，资源被锁定。删掉占用资源的文件或者关掉执行的其他apt任务就可以解决了。具体方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -a               // 显示所有进程，找到frontend的pid<br><span class="hljs-built_in">kill</span> -9 &lt;PID&gt;       // 解除进程<br></code></pre></td></tr></table></figure><h4 id="2-如何解决ubuntu提示没有找到ifconfig命令"><a href="#2-如何解决ubuntu提示没有找到ifconfig命令" class="headerlink" title="2. 如何解决ubuntu提示没有找到ifconfig命令"></a>2. 如何解决ubuntu提示没有找到ifconfig命令</h4><p>在ubuntu 20.04中，不建议使用 ifconfig 命令。这就是为什么会收到有关缺少的 ifconfig 命令的错误的原因。若想要查看ip地址。可以使用​ ​ip addr ​​命令，它几乎可以执行与ifconfig命令相同的任务</p><p>如果习惯使用旧的ifconfig命令，则需要安装​​net-tools​​软件包。net-tools是一个工具包，其中包含构成​ ​Linux​​ 网络基础的一系列程序。这些包括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br>netstat<br>dig<br>hostname<br>route<br>arp<br>iptunnel<br></code></pre></td></tr></table></figure><p>解决ifconfig命令找不到的问题，要解决以上错误，就需要安装net-tools工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install net-tools<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>create-blog</title>
    <link href="/2022/11/25/create-blog/"/>
    <url>/2022/11/25/create-blog/</url>
    
    <content type="html"><![CDATA[<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><hr><h4 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h4><h5 id="1-1-安装配置git"><a href="#1-1-安装配置git" class="headerlink" title="1.1 安装配置git"></a>1.1 安装配置git</h5><h5 id="1-2-在github创建仓库"><a href="#1-2-在github创建仓库" class="headerlink" title="1.2 在github创建仓库"></a>1.2 在github创建仓库</h5><p>填写仓库名，格式必须为&lt;用户名&gt;.github.io</p><h5 id="1-3-安装nodejs"><a href="#1-3-安装nodejs" class="headerlink" title="1.3 安装nodejs"></a>1.3 安装nodejs</h5><p>首先下载稳定版nodejs，安装选项全部默认，一路点击next，最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><h5 id="1-4-安装hexo"><a href="#1-4-安装hexo" class="headerlink" title="1.4 安装hexo"></a>1.4 安装hexo</h5><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，我们采用hexo来创建我们的博客网站，hexo 是一个基于 nodejs 的静态博客网站生成器，使用 hexo 不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便<br>安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个项目 hexo_blog 并初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo init hexo_blog<br>cd hexo_blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>hexo平时常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo g  # 生成博客网页文件<br>hexo s  # 本地预览博客<br>hexo d  # 上传网页文件到github<br></code></pre></td></tr></table></figure><h5 id="1-5-浏览器访问"><a href="#1-5-浏览器访问" class="headerlink" title="1.5 浏览器访问"></a>1.5 浏览器访问</h5><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></p><h4 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h4><p>hexo官方提供了数百种主题供用户选择，官方网址点击<a href="https://hexo.io/themes/">这里</a>，本文以 fluid 主题为例进行讲解</p><h5 id="2-1-fluid主题"><a href="#2-1-fluid主题" class="headerlink" title="2.1 fluid主题"></a>2.1 fluid主题</h5><h6 id="2-1-1-主题安装"><a href="#2-1-1-主题安装" class="headerlink" title="2.1.1 主题安装"></a>2.1.1 主题安装</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hexo">cd hexo_blog<br>git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><h6 id="2-1-2-使用主题"><a href="#2-1-2-使用主题" class="headerlink" title="2.1.2 使用主题"></a>2.1.2 使用主题</h6><p>打开根目录 _config.yml 文件，该文件为站点配置文件，将主题修改为 fluid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">theme: fluid<br></code></pre></td></tr></table></figure><h6 id="2-1-3-本地启动"><a href="#2-1-3-本地启动" class="headerlink" title="2.1.3 本地启动"></a>2.1.3 本地启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h4 id="3-编写文章"><a href="#3-编写文章" class="headerlink" title="3. 编写文章"></a>3. 编写文章</h4><h5 id="3-1-修改配置"><a href="#3-1-修改配置" class="headerlink" title="3.1 修改配置"></a>3.1 修改配置</h5><p>修改 hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">post_asset_folder: true<br></code></pre></td></tr></table></figure><h5 id="3-2-创建文章"><a href="#3-2-创建文章" class="headerlink" title="3.2 创建文章"></a>3.2 创建文章</h5><p>在根目录执行以下命令，创建一篇文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo new post create-blog<br></code></pre></td></tr></table></figure><p>执行完成后在 source_posts 目录下生成了一个md文件(用于写文章)和一个同名的资源目录(用于存放图片)</p><!-- ![create-blog.png](create-blog.png) --><img src="/2022/11/25/create-blog/create-blog.png" class="" title="create-blog.png"><h5 id="3-3-本地发布"><a href="#3-3-本地发布" class="headerlink" title="3.3 本地发布"></a>3.3 本地发布</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，文章添加成功">http://localhost:4000，文章添加成功</a></p><h4 id="4-发布文章"><a href="#4-发布文章" class="headerlink" title="4. 发布文章"></a>4. 发布文章</h4><p>写好的文章可以发布到 GitHub Pages，或者自己的服务器</p><h5 id="4-1-方式一"><a href="#4-1-方式一" class="headerlink" title="4.1 方式一"></a>4.1 方式一</h5><p>直接上传 public 目录中的文件和目录到 GitHub 对应仓库中</p><h5 id="4-2-方式二"><a href="#4-2-方式二" class="headerlink" title="4.2 方式二"></a>4.2 方式二</h5><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改根目录文件 _config.yml 中 deploy 下的相关信息，其中 token 为 github 的 Personal access tokens<br>部署到github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hexo">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h5 id="4-2-方式三"><a href="#4-2-方式三" class="headerlink" title="4.2 方式三"></a>4.2 方式三</h5><p>发布到自己的服务器，此处省略</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/11/25/test/"/>
    <url>/2022/11/25/test/</url>
    
    <content type="html"><![CDATA[<h4 id="This-is-a-test…"><a href="#This-is-a-test…" class="headerlink" title="This is a test…"></a>This is a test…</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/25/hello-world/"/>
    <url>/2022/11/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
